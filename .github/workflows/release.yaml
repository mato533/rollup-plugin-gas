name: CD
on:
  pull_request:
    branches:
      - master
    types: [closed]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_EMAIL: "41898282+github-actions[bot]@users.noreply.github.com"
  GH_USER: "github-actions[bot]"

jobs:
  prepare:
    if: >-
      github.event.pull_request.merged == true && 
      ${{ startsWith(github.event.pull_request.title, 'chore: [CD]Release for') }}
    name: Prepare for the release job
    runs-on: ubuntu-latest

    outputs:
      app_version: ${{ steps.identify-version.outputs.app_version }}
      app_version_text: ${{ steps.identify-version.outputs.app_version_text }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Identify the version about to release
        id: identify-version
        run: |
          APP_VERSION="$(echo '${{ github.head_ref }}' |grep -o -E "([0-9]+\.){1}[0-9]+(\.[0-9]+)?" | head -n1)"
          if [ ! -n "${APP_VERSION}" ]
          then
            exit 255
          fi
          echo "app_version=${APP_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "app_version_text=v${APP_VERSION}" >>"${GITHUB_OUTPUT}"

  test:
    name: Test & build
    needs:
      - prepare
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"
      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Run the test
        run: yarn run test

      - name: Run the test for typescripts
        run: yarn run test:ts

      - name: Run the test for build
        run: yarn run build

  publish:
    name: Publish to the NPM registry
    needs:
      - prepare
      - test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"
          registry-url: "https://registry.npmjs.org"
      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Run the build
        run: |
          yarn run build

      - name: Publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  coverage:
    name: Upload the coverage
    needs:
      - prepare
      - test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"
      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Run the coverage
        run: yarn run coverage

      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          verbose: true

  tag:
    name: Add the tag for the released version
    needs:
      - prepare
      - test
      - publish
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Set Github user informations.
        run: |
          git config --local user.email "${{ env.GH_EMAIL }}"
          git config --local user.name "${{ env.GH_USER }}"

      - name: Add the release tag
        run: |
          git tag ${{ needs.prepare.outputs.app_version_text }}
          git push origin ${{ needs.prepare.outputs.app_version_text }}

  merge-to-develop:
    name: Create the pull request to develop
    needs:
      - prepare
      - test
      - publish

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Pull the remote branch
        run: git pull $(git remote show) ${{ github.head_ref }}

      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"

      - name: Set Github user informations.
        run: |
          git config --local user.email "${{ env.GH_EMAIL }}"
          git config --local user.name "${{ env.GH_USER }}"

      - name: Define the pull request title.
        id: define-pr-title
        run: |
          echo "pr_title=chore: Release for ${{ needs.prepare.outputs.app_version_text }}">>"${GITHUB_OUTPUT}"

      - name: Create pull request(for develop)
        run: |
          PR_URL="$(gh pr create \
            -B master \
            -t "${{ steps.define-pr-title.outputs.pr_title }}" \
            -a ${{ github.actor }} \
            --body-file ./.github/RELEASE_WORKFLOW_TEMPLATE.md)"
          test $? -ne 0 && exit 255
          gh pr merge "${PR_URL}" --auto
